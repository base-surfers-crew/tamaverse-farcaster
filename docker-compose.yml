services:
  frontend:
    build: 
      context: ./frontend
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`) && PathPrefix(`/`)"
      - "traefik.http.routers.frontend.tls.certresolver=le"
      - "traefik.http.routers.frontend.tls=true"
    networks:
      - traefik
      
  backend:
    build: 
      context: ./backend
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN}`) && PathPrefix(`/backend`)"
      - "traefik.http.routers.backend.tls.certresolver=le"
      - "traefik.http.routers.backend.tls=true"
    depends_on:
      - pg_db
    networks:
      - traefik
      - pg_net

  pg_db:
    image: postgres:16
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - pg_net

volumes:
  pgdata:

networks:
  pg_net:
  traefik:
    name: traefik
    external: true


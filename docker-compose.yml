services:
  frontend:
    build: 
      context: ./frontend
    restart: unless-stopped
    labels:
      - "custom.label=${COMPOSE_PROJECT_NAME}"
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"
    networks:
      - traefik
      
  backend:
    build: 
      context: ./backend
    restart: unless-stopped
    labels:
      - "custom.label=${COMPOSE_PROJECT_NAME}"
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web"
    depends_on:
      - pg_db
    networks:
      - traefik
      - pg_net

  pg_db:
    image: postgres:16
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - pg_net

  traefik:
    image: traefik:2.7
    command:
      - "--log.level=INFO"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.constraints=Label(`custom.label`,`${COMPOSE_PROJECT_NAME}`)"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=${COMPOSE_PROJECT_NAME}_traefik"
      - "--entrypoints.web.address=:80"
    labels:
      - "io.portainer.accesscontrol.teams=devs,managers"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - traefik

volumes:
  pgdata:

networks:
  pg_net:
  traefik:

